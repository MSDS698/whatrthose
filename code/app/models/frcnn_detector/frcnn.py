# from config import Config
from keras import backend as K
from keras.layers import Input
from keras.models import Model
from app.models.frcnn_detector.model import *
from app.models.frcnn_detector.utils import *
import time
import os
import pickle
import math

os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'


class Config:

    def __init__(self):
        # Print the process or not
        self.verbose = True

        # Name of base network
        self.network = 'vgg'

        # Setting for data augmentation
        self.use_horizontal_flips = False
        self.use_vertical_flips = False
        self.rot_90 = False

        # Anchor box scales
        # Note that if im_size is smaller, anchor_box_scales should be scaled
        # Original anchor_box_scales in the paper is [128, 256, 512]
        self.anchor_box_scales = [128, 256, 512]

        # Anchor box ratios
        self.anchor_box_ratios = [[1, 1],
                                  [1. / math.sqrt(2), 2. / math.sqrt(2)],
                                  [2. / math.sqrt(2), 1. / math.sqrt(2)]]

        # Size to resize the smallest side of the image
        # Original setting in paper is 600. Set to 300 in here to save training
        # time
        self.im_size = 600

        # image channel-wise mean to subtract
        self.img_channel_mean = [103.939, 116.779, 123.68]
        self.img_scaling_factor = 1.0

        # number of ROIs at once
        self.num_rois = 10

        # stride at the RPN (this depends on the network configuration)
        self.rpn_stride = 16

        self.balanced_classes = False

        # scaling the stdev
        self.std_scaling = 4.0
        self.classifier_regr_std = [8.0, 8.0, 4.0, 4.0]

        # overlaps for RPN
        self.rpn_min_overlap = 0.3
        self.rpn_max_overlap = 0.7

        # overlaps for classifier ROIs
        self.classifier_min_overlap = 0.1
        self.classifier_max_overlap = 0.5

        # placeholder for the class mapping, automatically generated by the
        # parser
        self.class_mapping = {0: 'shoe', 1: 'bg'}

        self.model_path = None


class detector_model:
    '''
    detector model class 
    '''

    def __init__(self):
        self.C = Config()
        pass

    def load_model(self, detector_weights):
        '''
    	Loads FRCNN model from detector_path
    	'''

        # Read in Config for Testing
        # with open(detector_config, 'rb') as f_in:
        #    config = pickle.load(f_in)     

        # Turn off any data augmentation at test time
        self.C.model_path = detector_weights
        self.C.use_horizontal_flips = False
        self.C.use_vertical_flips = False
        self.C.rot_90 = False
        class_mapping = self.C.class_mapping
        class_mapping = {v: k for k, v in class_mapping.items()}

        # Gather Model Inputs 
        num_features = 512
        input_shape_img = (None, None, 3)
        input_shape_features = (None, None, num_features)
        img_input = Input(shape=input_shape_img)
        roi_input = Input(shape=(self.C.num_rois, 4))
        feature_map_input = Input(shape=input_shape_features)

        # Define Model Layers 
        shared_layers = nn_base(img_input, trainable=True)
        num_anchors = len(self.C.anchor_box_scales) * len(
            self.C.anchor_box_ratios)
        rpn_layers = rpn_layer(shared_layers, num_anchors)
        classifier = classifier_layer(feature_map_input, roi_input,
                                      self.C.num_rois,
                                      nb_classes=len(self.C.class_mapping))

        # Build Models 
        model_rpn = Model(img_input, rpn_layers)
        model_classifier_only = Model([feature_map_input, roi_input],
                                      classifier)
        model_classifier = Model([feature_map_input, roi_input], classifier)

        print('Loading weights from {}'.format(self.C.model_path))
        model_rpn.load_weights(self.C.model_path, by_name=True)
        model_classifier.load_weights(self.C.model_path, by_name=True)

        model_rpn.compile(optimizer='sgd', loss='mse')
        model_classifier.compile(optimizer='sgd', loss='mse')

        self.model_rpn = model_rpn
        self.model_classifier = model_classifier

    def predict(self, img, save_path):

        # Predict
        bbox_threshold = 0.95

        final_predictions = []

        T = {}
        P = {}

        # Create copy of original image
        img_o = img
        cv2.imwrite("app/models/frcnn_detector/output/test.jpg", img_o)
        img = img_o.copy()
        X, ratio = format_img(img, self.C)

        _, fx, fy = format_img_map(img, self.C)

        # Change X (img) shape from (1, channel, height, width) to (1, height,
        # width, channel)
        X = np.transpose(X, (0, 2, 3, 1))

        # get the feature maps and output from the RPN
        [Y1, Y2, F] = self.model_rpn.predict(X)

        R = rpn_to_roi(Y1, Y2, self.C, overlap_thresh=0.8)

        # convert from (x1,y1,x2,y2) to (x,y,w,h)
        R[:, 2] -= R[:, 0]
        R[:, 3] -= R[:, 1]

        # apply the spatial pyramid pooling to the proposed regions
        bboxes = {}
        probs = {}

        for jk in range(R.shape[0] // self.C.num_rois + 1):
            ROIs = np.expand_dims(
                R[self.C.num_rois * jk:self.C.num_rois * (jk + 1), :], axis=0)
            if ROIs.shape[1] == 0:
                break

            if jk == R.shape[0] // self.C.num_rois:
                # pad R
                curr_shape = ROIs.shape
                target_shape = (curr_shape[0], self.C.num_rois, curr_shape[2])
                ROIs_padded = np.zeros(target_shape).astype(ROIs.dtype)
                ROIs_padded[:, :curr_shape[1], :] = ROIs
                ROIs_padded[0, curr_shape[1]:, :] = ROIs[0, 0, :]
                ROIs = ROIs_padded

            [P_cls, P_regr] = self.model_classifier.predict([F, ROIs])

            # Calculate all classes' bboxes coordinates on resized image
            # (300, 400) Drop 'bg' classes bboxes
            for ii in range(P_cls.shape[1]):

                # If class name is 'bg', continue
                if np.max(P_cls[0, ii, :]) < bbox_threshold or np.argmax(
                        P_cls[0, ii, :]) == (P_cls.shape[2] - 1):
                    continue

                # Get class name
                cls_name = self.C.class_mapping[np.argmax(P_cls[0, ii, :])]

                if cls_name not in bboxes:
                    bboxes[cls_name] = []
                    probs[cls_name] = []

                (x, y, w, h) = ROIs[0, ii, :]

                cls_num = np.argmax(P_cls[0, ii, :])
                try:
                    (tx, ty, tw, th) = P_regr[0, ii,
                                       4 * cls_num:4 * (cls_num + 1)]
                    tx /= self.C.classifier_regr_std[0]
                    ty /= self.C.classifier_regr_std[1]
                    tw /= self.C.classifier_regr_std[2]
                    th /= self.C.classifier_regr_std[3]
                    x, y, w, h = roi_helpers.apply_regr(x, y, w, h, tx, ty, tw,
                                                        th)
                except:
                    pass
                bboxes[cls_name].append(
                    [16 * x, 16 * y, 16 * (x + w), 16 * (y + h)])
                probs[cls_name].append(np.max(P_cls[0, ii, :]))

        all_dets = []
        real_dets = []

        # if no predictions
        if bboxes == {}:
            real_dets.append(
                {'x1': 0, 'y1': 0, 'x2': img.shape[0], 'y2': img.shape[1]})

        for key in bboxes:
            bbox = np.array(bboxes[key])

            # Apply non-max-suppression on final bboxes to get the output
            # bounding boxe
            new_boxes, new_probs = non_max_suppression_fast(
                bbox, np.array(probs[key]), overlap_thresh=0.2)
            for jk in range(new_boxes.shape[0]):
                (x1, y1, x2, y2) = new_boxes[jk, :]
                det = {'x1': x1, 'x2': x2, 'y1': y1, 'y2': y2,
                       'class': key, 'prob': new_probs[jk]}
                all_dets.append(det)

                # Calculate real coordinates on original image
                (real_x1, real_y1, real_x2, real_y2) = get_real_coordinates(
                    ratio, x1, y1, x2, y2)
                real_det = {'x1': real_x1, 'x2': real_x2, 'y1': real_y1,
                            'y2': real_y2, 'prob': new_probs[jk]}
                real_dets.append(real_det)

        final_predictions.append([img_o, real_dets])
        print(len(final_predictions[0][1]))

        # Crop images and save
        img_paths = save_crop(final_predictions, save_path)

        return img_paths
